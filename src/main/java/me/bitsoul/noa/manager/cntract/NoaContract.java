package me.bitsoul.noa.manager.cntract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class NoaContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_approve = "approve";

    public static final String FUNC_balanceOf = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_COMBO = "combo";

    public static final String FUNC_CONTRACTURI = "contractURI";

    public static final String FUNC_CREATEEVENT = "createEvent";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETEVENTINFO = "getEventInfo";

    public static final String FUNC_GETSLOTDETAIL = "getSlotDetail";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISAPPROVEDFORSLOT = "isApprovedForSlot";

    public static final String FUNC_METADATADESCRIPTOR = "metadataDescriptor";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTEVENTTOMANYUSERS = "mintEventToManyUsers";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETAPPROVALFORSLOT = "setApprovalForSlot";

    public static final String FUNC_SETCOMBOPRENOAPRICE = "setComboPreNoAPrice";

    public static final String FUNC_SETMERKLEROOT = "setMerkleRoot";

    public static final String FUNC_SETMETADATADESCRIPTOR = "setMetadataDescriptor";

    public static final String FUNC_SETWHITELISTEDMINT = "setWhiteListedMint";

    public static final String FUNC_SLOTBYINDEX = "slotByIndex";

    public static final String FUNC_SLOTCOUNT = "slotCount";

    public static final String FUNC_SLOTOF = "slotOf";

    public static final String FUNC_SLOTURI = "slotURI";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENINSLOTBYINDEX = "tokenInSlotByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENSUPPLYINSLOT = "tokenSupplyInSlot";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_transferFrom = "transferFrom";

    public static final String FUNC_VALUEDECIMALS = "valueDecimals";

    public static final org.web3j.abi.datatypes.Event APPROVAL_EVENT = new org.web3j.abi.datatypes.Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final org.web3j.abi.datatypes.Event APPROVALFORALL_EVENT = new org.web3j.abi.datatypes.Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event APPROVALFORSLOT_EVENT = new org.web3j.abi.datatypes.Event("ApprovalForSlot", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event APPROVALVALUE_EVENT = new org.web3j.abi.datatypes.Event("ApprovalValue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event BURNTOKEN_EVENT = new org.web3j.abi.datatypes.Event("BurnToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event EVENTADDED_EVENT = new org.web3j.abi.datatypes.Event("EventAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event EVENTTOKEN_EVENT = new org.web3j.abi.datatypes.Event("EventToken", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event INITIALIZED_EVENT = new org.web3j.abi.datatypes.Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
    ;

    public static final org.web3j.abi.datatypes.Event SETMETADATADESCRIPTOR_EVENT = new org.web3j.abi.datatypes.Event("SetMetadataDescriptor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final org.web3j.abi.datatypes.Event SLOTCHANGED_EVENT = new org.web3j.abi.datatypes.Event("SlotChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final org.web3j.abi.datatypes.Event TRANSFER_EVENT = new org.web3j.abi.datatypes.Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final org.web3j.abi.datatypes.Event TRANSFERVALUE_EVENT = new org.web3j.abi.datatypes.Event("TransferValue", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NoaContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NoaContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NoaContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NoaContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<ApprovalForSlotEventResponse> getApprovalForSlotEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORSLOT_EVENT, transactionReceipt);
        ArrayList<ApprovalForSlotEventResponse> responses = new ArrayList<ApprovalForSlotEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForSlotEventResponse typedResponse = new ApprovalForSlotEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._slot = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForSlotEventResponse> approvalForSlotEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForSlotEventResponse>() {
            @Override
            public ApprovalForSlotEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORSLOT_EVENT, log);
                ApprovalForSlotEventResponse typedResponse = new ApprovalForSlotEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._slot = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._operator = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForSlotEventResponse> approvalForSlotEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORSLOT_EVENT));
        return approvalForSlotEventFlowable(filter);
    }

    public List<ApprovalValueEventResponse> getApprovalValueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALVALUE_EVENT, transactionReceipt);
        ArrayList<ApprovalValueEventResponse> responses = new ArrayList<ApprovalValueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalValueEventResponse typedResponse = new ApprovalValueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalValueEventResponse> approvalValueEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalValueEventResponse>() {
            @Override
            public ApprovalValueEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALVALUE_EVENT, log);
                ApprovalValueEventResponse typedResponse = new ApprovalValueEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalValueEventResponse> approvalValueEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALVALUE_EVENT));
        return approvalValueEventFlowable(filter);
    }

    public List<BurnTokenEventResponse> getBurnTokenEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BURNTOKEN_EVENT, transactionReceipt);
        ArrayList<BurnTokenEventResponse> responses = new ArrayList<BurnTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BurnTokenEventResponse typedResponse = new BurnTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BurnTokenEventResponse> burnTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BurnTokenEventResponse>() {
            @Override
            public BurnTokenEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BURNTOKEN_EVENT, log);
                BurnTokenEventResponse typedResponse = new BurnTokenEventResponse();
                typedResponse.log = log;
                typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BurnTokenEventResponse> burnTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BURNTOKEN_EVENT));
        return burnTokenEventFlowable(filter);
    }

    public List<EventAddedEventResponse> getEventAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTADDED_EVENT, transactionReceipt);
        ArrayList<EventAddedEventResponse> responses = new ArrayList<EventAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventAddedEventResponse typedResponse = new EventAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.organizer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.eventName = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.eventDescription = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.eventImage = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.mintMax = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventAddedEventResponse> eventAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EventAddedEventResponse>() {
            @Override
            public EventAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTADDED_EVENT, log);
                EventAddedEventResponse typedResponse = new EventAddedEventResponse();
                typedResponse.log = log;
                typedResponse.organizer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.eventName = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.eventDescription = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.eventImage = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.mintMax = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventAddedEventResponse> eventAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTADDED_EVENT));
        return eventAddedEventFlowable(filter);
    }

    public List<EventTokenEventResponse> getEventTokenEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EVENTTOKEN_EVENT, transactionReceipt);
        ArrayList<EventTokenEventResponse> responses = new ArrayList<EventTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EventTokenEventResponse typedResponse = new EventTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.organizer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EventTokenEventResponse> eventTokenEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EventTokenEventResponse>() {
            @Override
            public EventTokenEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EVENTTOKEN_EVENT, log);
                EventTokenEventResponse typedResponse = new EventTokenEventResponse();
                typedResponse.log = log;
                typedResponse.eventId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.organizer = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.owner = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EventTokenEventResponse> eventTokenEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EVENTTOKEN_EVENT));
        return eventTokenEventFlowable(filter);
    }

    public List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, InitializedEventResponse>() {
            @Override
            public InitializedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INITIALIZED_EVENT, log);
                InitializedEventResponse typedResponse = new InitializedEventResponse();
                typedResponse.log = log;
                typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public List<SetMetadataDescriptorEventResponse> getSetMetadataDescriptorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETMETADATADESCRIPTOR_EVENT, transactionReceipt);
        ArrayList<SetMetadataDescriptorEventResponse> responses = new ArrayList<SetMetadataDescriptorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetMetadataDescriptorEventResponse typedResponse = new SetMetadataDescriptorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.metadataDescriptor = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetMetadataDescriptorEventResponse> setMetadataDescriptorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetMetadataDescriptorEventResponse>() {
            @Override
            public SetMetadataDescriptorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETMETADATADESCRIPTOR_EVENT, log);
                SetMetadataDescriptorEventResponse typedResponse = new SetMetadataDescriptorEventResponse();
                typedResponse.log = log;
                typedResponse.metadataDescriptor = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetMetadataDescriptorEventResponse> setMetadataDescriptorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETMETADATADESCRIPTOR_EVENT));
        return setMetadataDescriptorEventFlowable(filter);
    }

    public List<SlotChangedEventResponse> getSlotChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SLOTCHANGED_EVENT, transactionReceipt);
        ArrayList<SlotChangedEventResponse> responses = new ArrayList<SlotChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SlotChangedEventResponse typedResponse = new SlotChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._oldSlot = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._newSlot = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SlotChangedEventResponse> slotChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SlotChangedEventResponse>() {
            @Override
            public SlotChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SLOTCHANGED_EVENT, log);
                SlotChangedEventResponse typedResponse = new SlotChangedEventResponse();
                typedResponse.log = log;
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._oldSlot = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._newSlot = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SlotChangedEventResponse> slotChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SLOTCHANGED_EVENT));
        return slotChangedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<TransferValueEventResponse> getTransferValueEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERVALUE_EVENT, transactionReceipt);
        ArrayList<TransferValueEventResponse> responses = new ArrayList<TransferValueEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferValueEventResponse typedResponse = new TransferValueEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._toTokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferValueEventResponse> transferValueEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferValueEventResponse>() {
            @Override
            public TransferValueEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERVALUE_EVENT, log);
                TransferValueEventResponse typedResponse = new TransferValueEventResponse();
                typedResponse.log = log;
                typedResponse._fromTokenId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._toTokenId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferValueEventResponse> transferValueEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERVALUE_EVENT));
        return transferValueEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> allowance(BigInteger tokenId_, String operator_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_), 
                new org.web3j.abi.datatypes.Address(160, operator_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to_, BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(BigInteger tokenId_, String to_, BigInteger value_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_approve, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_balanceOf, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_balanceOf, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> combo(BigInteger eventId_, List<BigInteger> fromTokenIds_, String image_, String eventMetadataURI_, String to_, BigInteger value_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_COMBO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(eventId_), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(fromTokenIds_, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.Utf8String(image_), 
                new org.web3j.abi.datatypes.Utf8String(eventMetadataURI_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> contractURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTURI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createEvent(Event event_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEEVENT, 
                Arrays.<Type>asList(event_), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Event> getEventInfo(BigInteger eventId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETEVENTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(eventId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Event>() {}));
        return executeRemoteCallSingleValueReturn(function, Event.class);
    }

    public RemoteFunctionCall<SlotDetail> getSlotDetail(BigInteger slot_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSLOTDETAIL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(slot_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<SlotDetail>() {}));
        return executeRemoteCallSingleValueReturn(function, SlotDetail.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String name_, String symbol_, String metadataDescriptor_, String receiver_, String uToken_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_), 
                new org.web3j.abi.datatypes.Address(160, metadataDescriptor_), 
                new org.web3j.abi.datatypes.Address(160, receiver_), 
                new org.web3j.abi.datatypes.Address(160, uToken_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner_, String operator_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_), 
                new org.web3j.abi.datatypes.Address(160, operator_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForSlot(String owner_, BigInteger slot_, String operator_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORSLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_), 
                new org.web3j.abi.datatypes.generated.Uint256(slot_), 
                new org.web3j.abi.datatypes.Address(160, operator_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> metadataDescriptor() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_METADATADESCRIPTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(SlotDetail slotDetail_, String to_, List<byte[]> proof_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(slotDetail_, 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(proof_, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintEventToManyUsers(SlotDetail slotDetail_, List<String> to_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTEVENTTOMANYUSERS, 
                Arrays.<Type>asList(slotDetail_, 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(to_, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from_, String to_, BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from_, String to_, BigInteger tokenId_, byte[] data_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId_), 
                new org.web3j.abi.datatypes.DynamicBytes(data_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator_, Boolean approved_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator_), 
                new org.web3j.abi.datatypes.Bool(approved_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForSlot(String owner_, BigInteger slot_, String operator_, Boolean approved_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORSLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_), 
                new org.web3j.abi.datatypes.generated.Uint256(slot_), 
                new org.web3j.abi.datatypes.Address(160, operator_), 
                new org.web3j.abi.datatypes.Bool(approved_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setComboPreNoAPrice(BigInteger price_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCOMBOPRENOAPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(price_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMerkleRoot(BigInteger eventId_, byte[] merkleRoot_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMERKLEROOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(eventId_), 
                new org.web3j.abi.datatypes.generated.Bytes32(merkleRoot_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMetadataDescriptor(String metadataDescriptor_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMETADATADESCRIPTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, metadataDescriptor_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWhiteListedMint(Boolean isWhiteListMint_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETWHITELISTEDMINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(isWhiteListMint_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> slotByIndex(BigInteger index_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SLOTBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> slotCount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SLOTCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> slotOf(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SLOTOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> slotURI(BigInteger slot_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SLOTURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(slot_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenInSlotByIndex(BigInteger slot_, BigInteger index_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENINSLOTBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(slot_), 
                new org.web3j.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner_, BigInteger index_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_), 
                new org.web3j.abi.datatypes.generated.Uint256(index_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenSupplyInSlot(BigInteger slot_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENSUPPLYINSLOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(slot_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(BigInteger fromTokenId_, String to_, BigInteger value_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from_, String to_, BigInteger tokenId_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from_), 
                new org.web3j.abi.datatypes.Address(160, to_), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(BigInteger fromTokenId_, BigInteger toTokenId_, BigInteger value_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_transferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(fromTokenId_), 
                new org.web3j.abi.datatypes.generated.Uint256(toTokenId_), 
                new org.web3j.abi.datatypes.generated.Uint256(value_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> valueDecimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALUEDECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static NoaContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NoaContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NoaContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NoaContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NoaContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NoaContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NoaContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NoaContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NoaContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NoaContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NoaContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NoaContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NoaContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NoaContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NoaContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NoaContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Event extends DynamicStruct {
        public String organizer;

        public String eventName;

        public String eventDescription;

        public String eventImage;

        public String eventMetadataURI;

        public BigInteger mintMax;

        public Event(String organizer, String eventName, String eventDescription, String eventImage, String eventMetadataURI, BigInteger mintMax) {
            super(new org.web3j.abi.datatypes.Address(organizer),new org.web3j.abi.datatypes.Utf8String(eventName),new org.web3j.abi.datatypes.Utf8String(eventDescription),new org.web3j.abi.datatypes.Utf8String(eventImage),new org.web3j.abi.datatypes.Utf8String(eventMetadataURI),new org.web3j.abi.datatypes.generated.Uint256(mintMax));
            this.organizer = organizer;
            this.eventName = eventName;
            this.eventDescription = eventDescription;
            this.eventImage = eventImage;
            this.eventMetadataURI = eventMetadataURI;
            this.mintMax = mintMax;
        }

        public Event(Address organizer, Utf8String eventName, Utf8String eventDescription, Utf8String eventImage, Utf8String eventMetadataURI, Uint256 mintMax) {
            super(organizer,eventName,eventDescription,eventImage,eventMetadataURI,mintMax);
            this.organizer = organizer.getValue();
            this.eventName = eventName.getValue();
            this.eventDescription = eventDescription.getValue();
            this.eventImage = eventImage.getValue();
            this.eventMetadataURI = eventMetadataURI.getValue();
            this.mintMax = mintMax.getValue();
        }
    }

    public static class SlotDetail extends DynamicStruct {
        public String name;

        public String description;

        public String image;

        public BigInteger eventId;

        public String eventMetadataURI;

        public SlotDetail(String name, String description, String image, BigInteger eventId, String eventMetadataURI) {
            super(new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(description),new org.web3j.abi.datatypes.Utf8String(image),new org.web3j.abi.datatypes.generated.Uint256(eventId),new org.web3j.abi.datatypes.Utf8String(eventMetadataURI));
            this.name = name;
            this.description = description;
            this.image = image;
            this.eventId = eventId;
            this.eventMetadataURI = eventMetadataURI;
        }

        public SlotDetail(Utf8String name, Utf8String description, Utf8String image, Uint256 eventId, Utf8String eventMetadataURI) {
            super(name,description,image,eventId,eventMetadataURI);
            this.name = name.getValue();
            this.description = description.getValue();
            this.image = image.getValue();
            this.eventId = eventId.getValue();
            this.eventMetadataURI = eventMetadataURI.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String _owner;

        public String _approved;

        public BigInteger _tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String _owner;

        public String _operator;

        public Boolean _approved;
    }

    public static class ApprovalForSlotEventResponse extends BaseEventResponse {
        public String _owner;

        public BigInteger _slot;

        public String _operator;

        public Boolean _approved;
    }

    public static class ApprovalValueEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;

        public String _operator;

        public BigInteger _value;
    }

    public static class BurnTokenEventResponse extends BaseEventResponse {
        public BigInteger eventId;

        public BigInteger tokenId;

        public String owner;
    }

    public static class EventAddedEventResponse extends BaseEventResponse {
        public String organizer;

        public BigInteger eventId;

        public String eventName;

        public String eventDescription;

        public String eventImage;

        public BigInteger mintMax;
    }

    public static class EventTokenEventResponse extends BaseEventResponse {
        public BigInteger eventId;

        public BigInteger tokenId;

        public String organizer;

        public String owner;
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class SetMetadataDescriptorEventResponse extends BaseEventResponse {
        public String metadataDescriptor;
    }

    public static class SlotChangedEventResponse extends BaseEventResponse {
        public BigInteger _tokenId;

        public BigInteger _oldSlot;

        public BigInteger _newSlot;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String _from;

        public String _to;

        public BigInteger _tokenId;
    }

    public static class TransferValueEventResponse extends BaseEventResponse {
        public BigInteger _fromTokenId;

        public BigInteger _toTokenId;

        public BigInteger _value;
    }
}
